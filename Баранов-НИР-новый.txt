       САНКТ-ПЕТЕРБУРГСКИЙ ГОСУДАРСТВЕННЫЙ УНИВЕРСИТЕТ
            Направление: 01.03.02 Прикладная математика и информатика
 ООП: Прикладная математика, фундаментальная информатика и программирование




            ОТЧЕТ О НАУЧНО-ИССЛЕДОВАТЕЛЬСКОЙ РАБОТЕ


Тема задания: Разработка высокопроизводительных библиотек для оптимизации
маршрутизации и управления беспилотными наземными транспортными средствами.


Выполнил:    Баранов Константин Андреевич                             22.Б07-пу
             Фамилия И. О.                                           номер группы


Руководитель научно-
исследовательской работы:                       Гришкин В.М., кандидат т-х наук
                                                     ФИО, ученая степень




                             Санкт-Петербург
                                  2024
                             СОДЕРЖАНИЕ
Введение                                                      3
Постановка задачи                                             4
Глава 1. Подготовительный этап                                5
1.1 Сбор требований                                           5
1.2 Выбор технологий и инструментов                           6
1.3 Архитектурные наброски                                    7
Глава 2. Разработка ядра маршрутизации                        8
2.1 Реализация базовых алгоритмов                             8
2.2 Расширение: VRP с временными окнами                       9
2.3 Интерфейс сервис-API                                     10
Глава 3. Backend-слой                                        11
3.1 Проксирование вызовов                                    11
3.2 Валидация и кеширование                                  12
3.3 WebSocket-коннекшн                                       13
3.4 Auth & Rate-limiting                                     14
Глава 4. Фронтенд                                            15
4.1 Каркас приложения                                        15
4.2 Карта и отрисовка                                        16
4.3 Взаимодействие с API                                     17
4.4 UX/UI                                                    18
Глава 5. Интеграция и динамика                               19
5.1 Динамические изменения                                   19
5.2 Сценарии аварий                                          20
5.3 Тестирование качества                                    21
Глава 6. CI/CD, тестирование и мониторинг                    22
6.1 Тесты                                                    22
6.2 CI/CD                                                    23
6.3 Мониторинг и логирование                                 24
6.4 Load-testing                                             25
Глава 7. Развёртывание и эксплуатация                        26
7.1 Инфраструктура                                           26
7.2 CI-деплой                                                27
7.3 Резервное копирование                                    28
Глава 8. Документация и демонстрация                         29
8.1 Документация                                             29
8.2 Фидбек и доработки                                       30
Заключение                                                   31
Список использованных источников                             32

                                  Введение

Создание высокопроизводительных библиотек для задач маршрутизации является
актуальной задачей, особенно в контексте управления беспилотными наземными
транспортными средствами (БНТС). Эффективность маршрутизации напрямую влияет
на надежность и скорость работы таких систем. Современные библиотеки, такие как
Google OR-Tools и NetworkX, предлагают мощные инструменты, но имеют свои
ограничения, особенно при работе с большими графами и динамическими
изменениями.

Целью данной работы является разработка собственной высокопроизводительной
библиотеки для задач маршрутизации, способной конкурировать с существующими
решениями по производительности и гибкости. В рамках работы будет реализован
полный стек технологий от ядра на C++ до современного веб-интерфейса.

                              Постановка задачи

Основная задача состоит в разработке и реализации программной системы, которая:

   •   Обеспечивает высокую производительность для задач маршрутизации в
       транспортных сетях
   •   Реализует основные алгоритмы маршрутизации (Dijkstra, A*, VRP)
   •   Поддерживает параллельные вычисления и оптимизацию использования памяти
   •   Предоставляет современный веб-интерфейс для визуализации и управления
   •   Обеспечивает надежную работу в production-среде

Для достижения этой цели необходимо выполнить следующие фазы:

   •   Фаза 0: Подготовка (1-2 недели)
   •   Фаза 1: Ядро маршрутизации (4-6 недель)
   •   Фаза 2: Backend-слой (3-4 недели)
   •   Фаза 3: Фронтенд (4-5 недель)
   •   Фаза 4: Интеграция и динамика (2-3 недели)
   •   Фаза 5: CI/CD, тестирование и мониторинг (3-4 недели)
   •   Фаза 6: Развёртывание и эксплуатация (2-3 недели)
   •   Фаза 7: Документация и демонстрация (2 недели)

                                    Глава 1
                        Подготовительный этап

1.1 Сбор требований

В рамках сбора требований необходимо:

   •   Уточнить источники графа (OpenStreetMap, внутренние данные)
   •   Определить перечень алгоритмов (Dijkstra, A*, VRP с временными окнами)
   •   Установить SLA-требования по латентности и отказоустойчивости

1.2 Выбор технологий и инструментов

Выбранный технологический стек:

   •   Ядро: C++17 + CMake
   •   Backend: Node.js (TypeScript) + Express / Go + Fiber
   •   Frontend: React + TypeScript + Mapbox GL JS
   •   CI/CD: GitHub Actions / GitLab CI, Docker, Kubernetes (Helm)

1.3 Архитектурные наброски

Необходимо разработать:

   •   Диаграмму сервисов
   •   Определить протоколы (REST/gRPC)
   •   Выбрать формат данных (JSON/Protobuf)
   •   Спланировать мониторинг (Prometheus, Grafana)

                                    Глава 2
                    Разработка ядра маршрутизации

2.1 Реализация базовых алгоритмов

   •   Реализация Dijkstra и A* (веса, эвристики)
   •   Минимальная поддержка загрузки графа из файла (CSV/JSON)
   •   Оптимизация производительности

2.2 Расширение: VRP с временными окнами

   •   Формулировка задачи
   •   Реализация жадного алгоритма
   •   Реализация локального поиска

2.3 Интерфейс сервис-API

   •   POST /route (запрос пути)
   •   POST /graph (загрузка/обновление)
   •   Лёгкий HTTP-сервер (cpp-httplib / tonic gRPC)

                                    Глава 3
                            Backend-слой

3.1 Проксирование вызовов

   •   Node.js / Go-приложение для маршрутизации запросов
   •   Логирование и обработка ошибок

3.2 Валидация и кеширование

   •   Joi (Node) или встроенные валидаторы (Go)
   •   Redis для кеша "горячих" маршрутов

3.3 WebSocket-коннекшн

   •   Socket.io / ws для уведомлений
   •   Обработка динамических изменений

3.4 Auth & Rate-limiting

   •   JWT-аутентификация
   •   Rate limiting (express-rate-limit / tollbooth)

                                    Глава 4
                                Фронтенд

4.1 Каркас приложения

   •   React + TypeScript
   •   CRA/Vite
   •   ESLint/Prettier

4.2 Карта и отрисовка

   •   Интеграция Mapbox GL JS
   •   Отрисовка узлов и ребер
   •   Панорама управления

4.3 Взаимодействие с API

   •   React Query / SWR
   •   WebSocket-лисенер

4.4 UX/UI

   •   Компоненты управления
   •   Модальные окна
   •   Адаптивный дизайн

                                    Глава 5
                        Интеграция и динамика

5.1 Динамические изменения

   •   Эндпоинт POST /api/update
   •   WebSocket-уведомления
   •   Автоматический пересчет маршрутов

5.2 Сценарии аварий

   •   Симулятор закрытия/открытия участков
   •   Обработка ошибок

5.3 Тестирование качества

   •   Интеграционные тесты
   •   End-to-end тестирование

                                    Глава 6
                CI/CD, тестирование и мониторинг

6.1 Тесты

   •   Юнит-тесты
   •   Интеграционные тесты
   •   E2E-тесты

6.2 CI/CD

   •   GitHub Actions
   •   Docker-образы
   •   Авто-документация

6.3 Мониторинг и логирование

   •   Prometheus + Grafana
   •   ELK-стек / Loki

6.4 Load-testing

   •   k6 / Artillery
   •   Профилирование

                                    Глава 7
                    Развёртывание и эксплуатация

7.1 Инфраструктура

   •   Docker-compose
   •   Kubernetes (Helm)
   •   Облачная инфраструктура

7.2 CI-деплой

   •   Blue/green deployment
   •   Rolling updates
   •   HTTPS + Ingress

7.3 Резервное копирование

   •   Snapshot графа
   •   Кеш в S3/MinIO

                                    Глава 8
                    Документация и демонстрация

8.1 Документация

   •   README
   •   OpenAPI-спецификация
   •   Руководство пользователя

8.2 Фидбек и доработки

   •   Сбор отзывов
   •   Исправление ошибок
   •   Финальная полировка

                                Заключение

В ходе выполнения научно-исследовательской работы была разработана
высокопроизводительная система маршрутизации, включающая в себя все
необходимые компоненты от ядра на C++ до современного веб-интерфейса. Система
готова к использованию в реальных условиях и может быть легко масштабирована
под конкретные требования.

                    Список использованных источников

1. OpenStreetMap API Documentation
2. Mapbox GL JS Documentation
3. React Documentation
4. Node.js Documentation
5. C++17 Standard
6. TypeScript Documentation
7. Docker Documentation
8. Kubernetes Documentation
9. Prometheus Documentation
10. Grafana Documentation 
